/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitGame
 * @category generated
 */
export type InitGameInstructionArgs = {
  startTime: beet.bignum
  endTime: beet.bignum
  openPrice: beet.bignum
}
/**
 * @category Instructions
 * @category InitGame
 * @category generated
 */
export const initGameStruct = new beet.BeetArgsStruct<
  InitGameInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['startTime', beet.i64],
    ['endTime', beet.i64],
    ['openPrice', beet.u64],
  ],
  'InitGameInstructionArgs'
)
/**
 * Accounts required by the _initGame_ instruction
 *
 * @property [_writable_] globalConfigData
 * @property [_writable_] gameData
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category InitGame
 * @category generated
 */
export type InitGameInstructionAccounts = {
  globalConfigData: web3.PublicKey
  gameData: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
}

export const initGameInstructionDiscriminator = [
  251, 46, 12, 208, 184, 148, 157, 73,
]

/**
 * Creates a _InitGame_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitGame
 * @category generated
 */
export function createInitGameInstruction(
  accounts: InitGameInstructionAccounts,
  args: InitGameInstructionArgs,
  programId = new web3.PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')
) {
  const [data] = initGameStruct.serialize({
    instructionDiscriminator: initGameInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.globalConfigData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.gameData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
