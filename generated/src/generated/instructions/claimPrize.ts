/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClaimPrize
 * @category generated
 */
export const claimPrizeStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClaimPrizeInstructionArgs'
)
/**
 * Accounts required by the _claimPrize_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] globalConfigData
 * @property [_writable_] userData
 * @property [_writable_] entrants
 * @property [_writable_] tokenMint
 * @property [_writable_] tokenVault
 * @property [_writable_] payerTokenAccount
 * @category Instructions
 * @category ClaimPrize
 * @category generated
 */
export type ClaimPrizeInstructionAccounts = {
  payer: web3.PublicKey
  globalConfigData: web3.PublicKey
  userData: web3.PublicKey
  entrants: web3.PublicKey
  tokenMint: web3.PublicKey
  tokenVault: web3.PublicKey
  payerTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
}

export const claimPrizeInstructionDiscriminator = [
  157, 233, 139, 121, 246, 62, 234, 235,
]

/**
 * Creates a _ClaimPrize_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClaimPrize
 * @category generated
 */
export function createClaimPrizeInstruction(
  accounts: ClaimPrizeInstructionAccounts,
  programId = new web3.PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')
) {
  const [data] = claimPrizeStruct.serialize({
    instructionDiscriminator: claimPrizeInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.globalConfigData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.entrants,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
