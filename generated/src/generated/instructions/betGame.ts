/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { BetDirection, betDirectionBeet } from '../types/BetDirection'

/**
 * @category Instructions
 * @category BetGame
 * @category generated
 */
export type BetGameInstructionArgs = {
  startTime: beet.bignum
  betDirection: BetDirection
  betAmount: beet.bignum
}
/**
 * @category Instructions
 * @category BetGame
 * @category generated
 */
export const betGameStruct = new beet.BeetArgsStruct<
  BetGameInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['startTime', beet.i64],
    ['betDirection', betDirectionBeet],
    ['betAmount', beet.u64],
  ],
  'BetGameInstructionArgs'
)
/**
 * Accounts required by the _betGame_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] globalConfigData
 * @property [_writable_] gameData
 * @property [_writable_] betData
 * @property [_writable_] userData
 * @property [_writable_] entrants
 * @property [_writable_] tokenMint
 * @property [_writable_] tokenVault
 * @property [_writable_] betTokenAccount
 * @category Instructions
 * @category BetGame
 * @category generated
 */
export type BetGameInstructionAccounts = {
  payer: web3.PublicKey
  globalConfigData: web3.PublicKey
  gameData: web3.PublicKey
  betData: web3.PublicKey
  userData: web3.PublicKey
  entrants: web3.PublicKey
  tokenMint: web3.PublicKey
  tokenVault: web3.PublicKey
  betTokenAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
}

export const betGameInstructionDiscriminator = [
  194, 108, 11, 249, 146, 9, 228, 164,
]

/**
 * Creates a _BetGame_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category BetGame
 * @category generated
 */
export function createBetGameInstruction(
  accounts: BetGameInstructionAccounts,
  args: BetGameInstructionArgs,
  programId = new web3.PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')
) {
  const [data] = betGameStruct.serialize({
    instructionDiscriminator: betGameInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.globalConfigData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.gameData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.betData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.entrants,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.betTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
