/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateGame
 * @category generated
 */
export type UpdateGameInstructionArgs = {
  prevStartTime: beet.bignum
  newStartTime: beet.bignum
  newEndTime: beet.bignum
  prevClosePrice: beet.bignum
  newOpenPrice: beet.bignum
}
/**
 * @category Instructions
 * @category UpdateGame
 * @category generated
 */
export const updateGameStruct = new beet.BeetArgsStruct<
  UpdateGameInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['prevStartTime', beet.i64],
    ['newStartTime', beet.i64],
    ['newEndTime', beet.i64],
    ['prevClosePrice', beet.u64],
    ['newOpenPrice', beet.u64],
  ],
  'UpdateGameInstructionArgs'
)
/**
 * Accounts required by the _updateGame_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] globalConfigData
 * @property [_writable_] oldGameData
 * @property [_writable_] newGameData
 * @category Instructions
 * @category UpdateGame
 * @category generated
 */
export type UpdateGameInstructionAccounts = {
  payer: web3.PublicKey
  globalConfigData: web3.PublicKey
  oldGameData: web3.PublicKey
  newGameData: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
}

export const updateGameInstructionDiscriminator = [
  159, 61, 132, 131, 3, 234, 209, 220,
]

/**
 * Creates a _UpdateGame_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateGame
 * @category generated
 */
export function createUpdateGameInstruction(
  accounts: UpdateGameInstructionAccounts,
  args: UpdateGameInstructionArgs,
  programId = new web3.PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')
) {
  const [data] = updateGameStruct.serialize({
    instructionDiscriminator: updateGameInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.globalConfigData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.oldGameData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newGameData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
