/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * IncorrectOwner: 'Account has incorrect owner!'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectOwnerError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'IncorrectOwner'
  constructor() {
    super('Account has incorrect owner!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new IncorrectOwnerError())
createErrorFromNameLookup.set('IncorrectOwner', () => new IncorrectOwnerError())

/**
 * IncorrectTokenOwner: 'Account has incorrect token owner!'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectTokenOwnerError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'IncorrectTokenOwner'
  constructor() {
    super('Account has incorrect token owner!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectTokenOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new IncorrectTokenOwnerError())
createErrorFromNameLookup.set(
  'IncorrectTokenOwner',
  () => new IncorrectTokenOwnerError()
)

/**
 * IncorrectManager: 'Account has incorrect manager!'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectManagerError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'IncorrectManager'
  constructor() {
    super('Account has incorrect manager!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectManagerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new IncorrectManagerError())
createErrorFromNameLookup.set(
  'IncorrectManager',
  () => new IncorrectManagerError()
)

/**
 * InvalidBetDirection: 'BetDirection must be one-way'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBetDirectionError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidBetDirection'
  constructor() {
    super('BetDirection must be one-way')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBetDirectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidBetDirectionError())
createErrorFromNameLookup.set(
  'InvalidBetDirection',
  () => new InvalidBetDirectionError()
)

/**
 * EntrantsQueueIsFull: 'Entrants queue is full. Claim prize first'
 *
 * @category Errors
 * @category generated
 */
export class EntrantsQueueIsFullError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'EntrantsQueueIsFull'
  constructor() {
    super('Entrants queue is full. Claim prize first')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EntrantsQueueIsFullError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new EntrantsQueueIsFullError())
createErrorFromNameLookup.set(
  'EntrantsQueueIsFull',
  () => new EntrantsQueueIsFullError()
)

/**
 * EntrantsQueueIsEmpty: 'Entrants queue is empty'
 *
 * @category Errors
 * @category generated
 */
export class EntrantsQueueIsEmptyError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'EntrantsQueueIsEmpty'
  constructor() {
    super('Entrants queue is empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EntrantsQueueIsEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new EntrantsQueueIsEmptyError())
createErrorFromNameLookup.set(
  'EntrantsQueueIsEmpty',
  () => new EntrantsQueueIsEmptyError()
)

/**
 * IncorrectAccountsLength: 'Incorrect length of accounts'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectAccountsLengthError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'IncorrectAccountsLength'
  constructor() {
    super('Incorrect length of accounts')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectAccountsLengthError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new IncorrectAccountsLengthError())
createErrorFromNameLookup.set(
  'IncorrectAccountsLength',
  () => new IncorrectAccountsLengthError()
)

/**
 * IncorrectClaimAccount: 'Account for claim is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectClaimAccountError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'IncorrectClaimAccount'
  constructor() {
    super('Account for claim is incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectClaimAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new IncorrectClaimAccountError())
createErrorFromNameLookup.set(
  'IncorrectClaimAccount',
  () => new IncorrectClaimAccountError()
)

/**
 * IncorrectClaimAccounts: 'Accounts for claim is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectClaimAccountsError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'IncorrectClaimAccounts'
  constructor() {
    super('Accounts for claim is incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectClaimAccountsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new IncorrectClaimAccountsError())
createErrorFromNameLookup.set(
  'IncorrectClaimAccounts',
  () => new IncorrectClaimAccountsError()
)

/**
 * IncorrectEntrantAccount: 'Account has incorrect entrant'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectEntrantAccountError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'IncorrectEntrantAccount'
  constructor() {
    super('Account has incorrect entrant')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectEntrantAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new IncorrectEntrantAccountError())
createErrorFromNameLookup.set(
  'IncorrectEntrantAccount',
  () => new IncorrectEntrantAccountError()
)

/**
 * PermissionDenied: 'Permission denied'
 *
 * @category Errors
 * @category generated
 */
export class PermissionDeniedError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'PermissionDenied'
  constructor() {
    super('Permission denied')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PermissionDeniedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new PermissionDeniedError())
createErrorFromNameLookup.set(
  'PermissionDenied',
  () => new PermissionDeniedError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
