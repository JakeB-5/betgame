/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { GameState, gameStateBeet } from '../types/GameState'
import { PoolBumps, poolBumpsBeet } from '../types/PoolBumps'

/**
 * Arguments used to create {@link GlobalConfigData}
 * @category Accounts
 * @category generated
 */
export type GlobalConfigDataArgs = {
  authority: web3.PublicKey
  managerAccount: web3.PublicKey
  gameCount: beet.bignum
  gameState: beet.COption<GameState>
  currentGame: beet.bignum
  previousGame: beet.bignum
  tokenMint: web3.PublicKey
  tokenVault: web3.PublicKey
  bumps: PoolBumps
}

export const globalConfigDataDiscriminator = [207, 12, 122, 228, 121, 60, 6, 59]
/**
 * Holds the data for the {@link GlobalConfigData} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class GlobalConfigData implements GlobalConfigDataArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly managerAccount: web3.PublicKey,
    readonly gameCount: beet.bignum,
    readonly gameState: beet.COption<GameState>,
    readonly currentGame: beet.bignum,
    readonly previousGame: beet.bignum,
    readonly tokenMint: web3.PublicKey,
    readonly tokenVault: web3.PublicKey,
    readonly bumps: PoolBumps
  ) {}

  /**
   * Creates a {@link GlobalConfigData} instance from the provided args.
   */
  static fromArgs(args: GlobalConfigDataArgs) {
    return new GlobalConfigData(
      args.authority,
      args.managerAccount,
      args.gameCount,
      args.gameState,
      args.currentGame,
      args.previousGame,
      args.tokenMint,
      args.tokenVault,
      args.bumps
    )
  }

  /**
   * Deserializes the {@link GlobalConfigData} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [GlobalConfigData, number] {
    return GlobalConfigData.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link GlobalConfigData} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<GlobalConfigData> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find GlobalConfigData account at ${address}`)
    }
    return GlobalConfigData.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, globalConfigDataBeet)
  }

  /**
   * Deserializes the {@link GlobalConfigData} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [GlobalConfigData, number] {
    return globalConfigDataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link GlobalConfigData} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return globalConfigDataBeet.serialize({
      accountDiscriminator: globalConfigDataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link GlobalConfigData} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: GlobalConfigDataArgs) {
    const instance = GlobalConfigData.fromArgs(args)
    return globalConfigDataBeet.toFixedFromValue({
      accountDiscriminator: globalConfigDataDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link GlobalConfigData} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: GlobalConfigDataArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      GlobalConfigData.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link GlobalConfigData} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      managerAccount: this.managerAccount.toBase58(),
      gameCount: (() => {
        const x = <{ toNumber: () => number }>this.gameCount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      gameState: this.gameState,
      currentGame: (() => {
        const x = <{ toNumber: () => number }>this.currentGame
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      previousGame: (() => {
        const x = <{ toNumber: () => number }>this.previousGame
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      tokenMint: this.tokenMint.toBase58(),
      tokenVault: this.tokenVault.toBase58(),
      bumps: this.bumps,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const globalConfigDataBeet = new beet.FixableBeetStruct<
  GlobalConfigData,
  GlobalConfigDataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['managerAccount', beetSolana.publicKey],
    ['gameCount', beet.u128],
    ['gameState', beet.coption(gameStateBeet)],
    ['currentGame', beet.i64],
    ['previousGame', beet.i64],
    ['tokenMint', beetSolana.publicKey],
    ['tokenVault', beetSolana.publicKey],
    ['bumps', poolBumpsBeet],
  ],
  GlobalConfigData.fromArgs,
  'GlobalConfigData'
)
