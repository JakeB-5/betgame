/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link GameData}
 * @category Accounts
 * @category generated
 */
export type GameDataArgs = {
  startTime: beet.bignum
  endTime: beet.bignum
  openPrice: beet.bignum
  closePrice: beet.bignum
  longBetAmount: beet.bignum
  longBetCount: number
  shortBetAmount: beet.bignum
  shortBetCount: number
  finish: boolean
}

export const gameDataDiscriminator = [237, 88, 58, 243, 16, 69, 238, 190]
/**
 * Holds the data for the {@link GameData} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class GameData implements GameDataArgs {
  private constructor(
    readonly startTime: beet.bignum,
    readonly endTime: beet.bignum,
    readonly openPrice: beet.bignum,
    readonly closePrice: beet.bignum,
    readonly longBetAmount: beet.bignum,
    readonly longBetCount: number,
    readonly shortBetAmount: beet.bignum,
    readonly shortBetCount: number,
    readonly finish: boolean
  ) {}

  /**
   * Creates a {@link GameData} instance from the provided args.
   */
  static fromArgs(args: GameDataArgs) {
    return new GameData(
      args.startTime,
      args.endTime,
      args.openPrice,
      args.closePrice,
      args.longBetAmount,
      args.longBetCount,
      args.shortBetAmount,
      args.shortBetCount,
      args.finish
    )
  }

  /**
   * Deserializes the {@link GameData} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [GameData, number] {
    return GameData.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link GameData} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<GameData> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find GameData account at ${address}`)
    }
    return GameData.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, gameDataBeet)
  }

  /**
   * Deserializes the {@link GameData} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [GameData, number] {
    return gameDataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link GameData} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return gameDataBeet.serialize({
      accountDiscriminator: gameDataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link GameData}
   */
  static get byteSize() {
    return gameDataBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link GameData} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      GameData.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link GameData} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === GameData.byteSize
  }

  /**
   * Returns a readable version of {@link GameData} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      startTime: (() => {
        const x = <{ toNumber: () => number }>this.startTime
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      endTime: (() => {
        const x = <{ toNumber: () => number }>this.endTime
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      openPrice: (() => {
        const x = <{ toNumber: () => number }>this.openPrice
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      closePrice: (() => {
        const x = <{ toNumber: () => number }>this.closePrice
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      longBetAmount: (() => {
        const x = <{ toNumber: () => number }>this.longBetAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      longBetCount: this.longBetCount,
      shortBetAmount: (() => {
        const x = <{ toNumber: () => number }>this.shortBetAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      shortBetCount: this.shortBetCount,
      finish: this.finish,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const gameDataBeet = new beet.BeetStruct<
  GameData,
  GameDataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['startTime', beet.i64],
    ['endTime', beet.i64],
    ['openPrice', beet.u64],
    ['closePrice', beet.u64],
    ['longBetAmount', beet.u64],
    ['longBetCount', beet.u32],
    ['shortBetAmount', beet.u64],
    ['shortBetCount', beet.u32],
    ['finish', beet.bool],
  ],
  GameData.fromArgs,
  'GameData'
)
