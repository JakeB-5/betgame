/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link UserEntrantData}
 * @category Accounts
 * @category generated
 */
export type UserEntrantDataArgs = {
  front: number
  rear: number
  entrantsQueue: web3.PublicKey[] /* size: 5 */
}

export const userEntrantDataDiscriminator = [55, 237, 67, 15, 13, 125, 131, 255]
/**
 * Holds the data for the {@link UserEntrantData} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class UserEntrantData implements UserEntrantDataArgs {
  private constructor(
    readonly front: number,
    readonly rear: number,
    readonly entrantsQueue: web3.PublicKey[] /* size: 5 */
  ) {}

  /**
   * Creates a {@link UserEntrantData} instance from the provided args.
   */
  static fromArgs(args: UserEntrantDataArgs) {
    return new UserEntrantData(args.front, args.rear, args.entrantsQueue)
  }

  /**
   * Deserializes the {@link UserEntrantData} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [UserEntrantData, number] {
    return UserEntrantData.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link UserEntrantData} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<UserEntrantData> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find UserEntrantData account at ${address}`)
    }
    return UserEntrantData.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, userEntrantDataBeet)
  }

  /**
   * Deserializes the {@link UserEntrantData} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [UserEntrantData, number] {
    return userEntrantDataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link UserEntrantData} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return userEntrantDataBeet.serialize({
      accountDiscriminator: userEntrantDataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link UserEntrantData}
   */
  static get byteSize() {
    return userEntrantDataBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link UserEntrantData} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      UserEntrantData.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link UserEntrantData} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === UserEntrantData.byteSize
  }

  /**
   * Returns a readable version of {@link UserEntrantData} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      front: this.front,
      rear: this.rear,
      entrantsQueue: this.entrantsQueue,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const userEntrantDataBeet = new beet.BeetStruct<
  UserEntrantData,
  UserEntrantDataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['front', beet.u32],
    ['rear', beet.u32],
    ['entrantsQueue', beet.uniformFixedSizeArray(beetSolana.publicKey, 5)],
  ],
  UserEntrantData.fromArgs,
  'UserEntrantData'
)
